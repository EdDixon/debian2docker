#!/bin/sh

### BEGIN INIT INFO
# Provides:           docker
# Required-Start:     $syslog $remote_fs
# Required-Stop:      $syslog $remote_fs
# Default-Start:      2 3 4 5
# Default-Stop:       0 1 6
# Short-Description:  Create lightweight, portable, self-sufficient containers.
# Description:
#  Docker is an open-source project to easily create lightweight, portable,
#  self-sufficient containers from any application. The same container that a
#  developer builds and tests on a laptop can run at scale, in production, on
#  VMs, bare metal, OpenStack clusters, public clouds and more.
### END INIT INFO

BASE=$(basename $0)

DOCKER=/usr/bin/$BASE
DOCKER_PIDFILE=/var/run/$BASE.pid
DOCKER_OPTS=
DOCKER_HOST=
export DOCKER_DIR=`readlink -f /var/lib/docker`
export TMPDIR=$(readlink -f ${TMPDIR:-/tmp})

PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

# Get lsb functions
. /lib/lsb/init-functions

if [ -f /etc/default/$BASE ]; then
	. /etc/default/$BASE
fi

# if we're virtual, let's listen on $DOCKER_HOST, too
if /bin/dmesg | /bin/egrep -q '(VirtualBox|VMware|QEMU)'; then
	DOCKER_OPTS="$DOCKER_OPTS -H $DOCKER_HOST"
else
	DOCKER_OPTS="$DOCKER_OPTS -H :4243"
fi

# if /var/lib/docker is on BTRFS, let's use the native btrfs driver
# (AUFS on top of BTRFS does very bad things)
DOCKER_DEVICE="$(/bin/df -P "$DOCKER_DIR" | /usr/bin/awk 'END { print $1 }')"
DOCKER_FSTYPE="$(/sbin/blkid -o export "$DOCKER_DEVICE" | /bin/grep TYPE= | /usr/bin/cut -d= -f2)"
if [ "$DOCKER_FSTYPE" = 'btrfs' ]; then
	DOCKER_OPTS="$DOCKER_OPTS -s $DOCKER_FSTYPE"
fi

# see also init_is_upstart in /lib/lsb/init-functions (which isn't available in Ubuntu 12.04, or we'd use it)
if [ -x /sbin/initctl ] && /sbin/initctl version 2>/dev/null | /bin/grep -q upstart; then
	log_failure_msg "Docker is managed via upstart, try using service $BASE $1"
	exit 1
fi

# Check docker is present
if [ ! -x $DOCKER ]; then
	log_failure_msg "$DOCKER not present or not executable"
	exit 1
fi

fail_unless_root() {
	if [ "$(id -u)" != '0' ]; then
		log_failure_msg "Docker must be run as root"
		exit 1
	fi
}

case "$1" in
	start)
		fail_unless_root
		log_begin_msg "Starting Docker: $BASE"
		mount | grep cgroup >/dev/null || mount -t cgroup none /sys/fs/cgroup 2>/dev/null
		start-stop-daemon --start --background \
			--exec "$DOCKER" \
			--pidfile "$DOCKER_PIDFILE" \
			-- -d -p "$DOCKER_PIDFILE" \
			$DOCKER_OPTS -g $DOCKER_DIR -H unix://
		log_end_msg $?
		;;

	stop)
		fail_unless_root
		log_begin_msg "Stopping Docker: $BASE"
		start-stop-daemon --stop \
			--pidfile "$DOCKER_PIDFILE"
		log_end_msg $?
		;;

	restart)
		fail_unless_root
		docker_pid=`cat "$DOCKER_PIDFILE" 2>/dev/null`
		[ -n "$docker_pid" ] \
			&& ps -p $docker_pid > /dev/null 2>&1 \
			&& $0 stop
		$0 start
		;;

	force-reload)
		fail_unless_root
		$0 restart
		;;

	status)
		status_of_proc -p "$DOCKER_PIDFILE" "$DOCKER" docker
		;;

	*)
		echo "Usage: $0 {start|stop|restart|status}"
		exit 1
		;;
esac

exit 0
